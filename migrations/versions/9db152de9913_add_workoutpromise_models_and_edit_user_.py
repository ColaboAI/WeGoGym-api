"""Add WorkoutPromise models and Edit user model

Revision ID: 9db152de9913
Revises: 3d011bb64820
Create Date: 2023-02-17 00:33:49.257150

"""
from alembic import op
import sqlalchemy as sa
import app.models.guid

# revision identifiers, used by Alembic.
revision = "9db152de9913"
down_revision = "3d011bb64820"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "gym_facility",
        sa.Column("id", app.models.guid.GUID(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("description", sa.String(), nullable=True),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_gym_facility")),
    )
    op.create_index(
        op.f("ix_gym_facility_description"),
        "gym_facility",
        ["description"],
        unique=False,
    )
    op.create_index(op.f("ix_gym_facility_id"), "gym_facility", ["id"], unique=False)
    op.create_index(op.f("ix_gym_facility_name"), "gym_facility", ["name"], unique=True)
    op.create_table(
        "gym_info",
        sa.Column("id", app.models.guid.GUID(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("is_custom_gym", sa.Boolean(), nullable=True),
        sa.Column("address", sa.String(), nullable=False),
        sa.Column("zip_code", sa.String(), nullable=True),
        sa.Column("status", sa.String(), nullable=True),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(),
            server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_gym_info")),
    )
    op.create_index(op.f("ix_gym_info_address"), "gym_info", ["address"], unique=True)
    op.create_index(op.f("ix_gym_info_id"), "gym_info", ["id"], unique=False)
    op.create_index(op.f("ix_gym_info_name"), "gym_info", ["name"], unique=False)
    op.create_table(
        "gym_info_facility_association_table",
        sa.Column("gym_info_id", app.models.guid.GUID(), nullable=False),
        sa.Column("facility_id", app.models.guid.GUID(), nullable=False),
        sa.ForeignKeyConstraint(
            ["facility_id"],
            ["gym_facility.id"],
            name=op.f(
                "fk_gym_info_facility_association_table_facility_id_gym_facility"
            ),
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["gym_info_id"],
            ["gym_info.id"],
            name=op.f("fk_gym_info_facility_association_table_gym_info_id_gym_info"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint(
            "gym_info_id",
            "facility_id",
            name=op.f("pk_gym_info_facility_association_table"),
        ),
    )
    op.create_table(
        "workout_promise",
        sa.Column("id", app.models.guid.GUID(), nullable=False),
        sa.Column("title", sa.String(), nullable=True),
        sa.Column("description", sa.String(), nullable=True),
        sa.Column("max_participants", sa.Integer(), nullable=True),
        sa.Column("is_private", sa.Boolean(), nullable=True),
        sa.Column("recruit_end_time", sa.DateTime(), nullable=True),
        sa.Column(
            "promise_time",
            sa.DateTime(),
            server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"),
            nullable=True,
        ),
        sa.Column("admin_user_id", app.models.guid.GUID(), nullable=True),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(),
            server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["admin_user_id"],
            ["user.id"],
            name=op.f("fk_workout_promise_admin_user_id_user"),
            ondelete="SET NULL",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_workout_promise")),
    )
    op.create_index(
        op.f("ix_workout_promise_description"),
        "workout_promise",
        ["description"],
        unique=False,
    )
    op.create_index(
        op.f("ix_workout_promise_id"), "workout_promise", ["id"], unique=False
    )
    op.create_index(
        op.f("ix_workout_promise_promise_time"),
        "workout_promise",
        ["promise_time"],
        unique=False,
    )
    op.create_index(
        op.f("ix_workout_promise_recruit_end_time"),
        "workout_promise",
        ["recruit_end_time"],
        unique=False,
    )
    op.create_index(
        op.f("ix_workout_promise_title"), "workout_promise", ["title"], unique=False
    )
    op.create_table(
        "workout_participant",
        sa.Column("id", app.models.guid.GUID(), nullable=False),
        sa.Column("name", sa.String(), nullable=True),
        sa.Column("status_message", sa.String(), nullable=True),
        sa.Column("status", sa.String(), nullable=True),
        sa.Column("user_id", app.models.guid.GUID(), nullable=True),
        sa.Column("workout_promise_id", app.models.guid.GUID(), nullable=True),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(),
            server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["user.id"],
            name=op.f("fk_workout_participant_user_id_user"),
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["workout_promise_id"],
            ["workout_promise.id"],
            name=op.f("fk_workout_participant_workout_promise_id_workout_promise"),
            ondelete="SET NULL",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_workout_participant")),
    )
    op.create_index(
        op.f("ix_workout_participant_id"), "workout_participant", ["id"], unique=False
    )
    op.create_index(
        op.f("ix_workout_participant_name"),
        "workout_participant",
        ["name"],
        unique=False,
    )
    op.create_index(
        op.f("ix_workout_participant_status"),
        "workout_participant",
        ["status"],
        unique=False,
    )
    op.drop_constraint("hashtag_name_key", "hashtag", type_="unique")
    op.create_unique_constraint(op.f("uq_hashtag_name"), "hashtag", ["name"])
    op.add_column(
        "user", sa.Column("gym_info_id", app.models.guid.GUID(), nullable=True)
    )
    op.create_foreign_key(
        op.f("fk_user_gym_info_id_gym_info"),
        "user",
        "gym_info",
        ["gym_info_id"],
        ["id"],
        ondelete="SET NULL",
    )
    op.drop_column("user", "gym_address")
    op.drop_column("user", "gym")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "user",
        sa.Column("gym", sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    )
    op.add_column(
        "user",
        sa.Column(
            "gym_address", sa.VARCHAR(length=255), autoincrement=False, nullable=True
        ),
    )
    op.drop_constraint(op.f("fk_user_gym_info_id_gym_info"), "user", type_="foreignkey")
    op.drop_column("user", "gym_info_id")
    op.drop_constraint(op.f("uq_hashtag_name"), "hashtag", type_="unique")
    op.create_unique_constraint("hashtag_name_key", "hashtag", ["name"])
    op.drop_index(
        op.f("ix_workout_participant_status"), table_name="workout_participant"
    )
    op.drop_index(op.f("ix_workout_participant_name"), table_name="workout_participant")
    op.drop_index(op.f("ix_workout_participant_id"), table_name="workout_participant")
    op.drop_table("workout_participant")
    op.drop_index(op.f("ix_workout_promise_title"), table_name="workout_promise")
    op.drop_index(
        op.f("ix_workout_promise_recruit_end_time"), table_name="workout_promise"
    )
    op.drop_index(op.f("ix_workout_promise_promise_time"), table_name="workout_promise")
    op.drop_index(op.f("ix_workout_promise_id"), table_name="workout_promise")
    op.drop_index(op.f("ix_workout_promise_description"), table_name="workout_promise")
    op.drop_table("workout_promise")
    op.drop_table("gym_info_facility_association_table")
    op.drop_index(op.f("ix_gym_info_name"), table_name="gym_info")
    op.drop_index(op.f("ix_gym_info_id"), table_name="gym_info")
    op.drop_index(op.f("ix_gym_info_address"), table_name="gym_info")
    op.drop_table("gym_info")
    op.drop_index(op.f("ix_gym_facility_name"), table_name="gym_facility")
    op.drop_index(op.f("ix_gym_facility_id"), table_name="gym_facility")
    op.drop_index(op.f("ix_gym_facility_description"), table_name="gym_facility")
    op.drop_table("gym_facility")
    # ### end Alembic commands ###
